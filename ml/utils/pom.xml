<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>ml-repository-parent</artifactId>
    <groupId>com.ibm.ml.repository.v4</groupId>
    <version>2.0.1</version>
  </parent>

  <artifactId>utils</artifactId>
  <packaging>jar</packaging>

  <properties>
    <main.class>com.ibm.ml.repository.v4.service.cams.GlobalAssetTypesApp</main.class>
  </properties>

  <dependencies>
    <!-- scala -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
    </dependency>

    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <!-- this is the Apache bridge -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.typesafe.scala-logging</groupId>
      <artifactId>scala-logging_${scala.compat.version}</artifactId>
    </dependency>

    <!-- Akka -->
    <dependency>
      <groupId>com.typesafe</groupId>
      <artifactId>config</artifactId>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-actor_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-stream_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-slf4j_${scala.compat.version}</artifactId>
    </dependency>

    <!-- the service-lib libraries -->
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-containers-client_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-utils-api_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-http-client_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-utils-service_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-cams-client_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-environments-client_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-repo-client_${scala.compat.version}</artifactId>
    </dependency>

    <!-- tests -->
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.compat.version}</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-test-framework_${scala.compat.version}</artifactId>
      <version>${ml-service.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <configuration>
          <forkMode>${tests.fork.mode}</forkMode>
          <stdout>${tests.stdout.coloring}</stdout> <!-- Skip coloring output -->
          <testFailureIgnore>false</testFailureIgnore>
          <wildcardSuites>${tests.wildcard.suites}</wildcardSuites>
          <parallel>${tests.parallel}</parallel>
          <reporters>com.ibm.ngpa.test_automation.framework.report.html.NGPATestReporter</reporters>
          <tagsToExclude>${tags.to.exclude}</tagsToExclude>
          <tagsToInclude>${tags.to.include}</tagsToInclude>
          <environmentVariables>
          </environmentVariables>
        </configuration>
        <executions>
          <execution>
            <id>run-tests</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeScope>runtime</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <overWriteReleases>true</overWriteReleases>
              <prependGroupId>true</prependGroupId>
            </configuration>
          </execution>
          <execution>
            <id>print-dependency-tree</id>
            <phase>package</phase>
            <goals>
              <goal>tree</goal>
            </goals>
            <configuration>
              <appendOutput>true</appendOutput>
              <outputFile>${project.build.directory}/libraries.txt</outputFile>
              <scope>runtime</scope>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>save-dependent-libs</id>
            <phase>prepare-package</phase>
            <configuration>
              <target>
                <delete file='${project.build.directory}/libraries.txt' quiet='true'/>
                <echo>Saving dependent libraries for COO to ${project.build.directory}/libraries.txt</echo>
                <exec executable='/bin/ls'
                      osfamily='unix'
                      failonerror='true'
                      output='${project.build.directory}/libraries.txt'>
                  <arg value='-1'/>
                  <arg value='${project.build.directory}/lib'/>
                </exec>
                <echo file='${project.build.directory}/libraries.txt' append='true'>

                </echo>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- disable surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>asset-registration-tests</id>
      <properties>
        <tests.wildcard.suites>com.ibm.ml.repository.v4.service.cams.GlobalAssetTypesSpec</tests.wildcard.suites>
      </properties>
    </profile>
    <profile>
      <id>check-style</id>
      <activation>
        <file>
          <missing>no-check-style</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scalastyle</groupId>
            <artifactId>scalastyle-maven-plugin</artifactId>
            <version>${scalastyle.plugin.version}</version>
            <executions>
              <execution>
                <id>verify-style</id>
                <!-- we do this after compile as otherwise the files might not parse -->
                <phase>prepare-package</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>coverage</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scoverage</groupId>
            <artifactId>scoverage-maven-plugin</artifactId>
            <inherited>true</inherited>
            <executions>
              <execution>
                <id>scoverage</id>
                <phase>prepare-package</phase>
                <configuration>
                  <additionalForkedProjectProperties>skipTests=false</additionalForkedProjectProperties>
                </configuration>
                <goals>
                  <goal>integration-check</goal>
                  <goal>report-only</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <reporting>
        <plugins>
          <plugin>
            <groupId>org.scoverage</groupId>
            <artifactId>scoverage-maven-plugin</artifactId>
            <version>${scoverage.plugin.version}</version>
          </plugin>
        </plugins>
      </reporting>
    </profile>
    <profile>
      <id>asset-registration</id>
      <properties>
        <arg.env>TEST</arg.env>
        <arg.url>https://api.dataplatform.dev.cloud.ibm.com</arg.url>
        <arg.auth>service-id</arg.auth>
        <arg.option>--list-only</arg.option>
        <arg.request-id>--request-id=list-asset-registration</arg.request-id>
      </properties>
      <build>
        <defaultGoal>process-classes</defaultGoal>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
              <execution>
                <id>asset-registration</id>
                <phase>process-classes</phase>
                <configuration>
                  <executable>java</executable>
                  <classpathScope>compile</classpathScope>
                  <arguments>
                    <argument>-Dlog4j.configurationFile=src/test/resources/log4j2-reg.xml</argument>
                    <argument>-classpath</argument>
                    <!-- automatically creates the classpath using all project dependencies, also adding the project build directory -->
                    <classpath/>
                    <argument>${main.class}</argument>
                    <argument>${arg.env}</argument>
                    <argument>${arg.url}</argument>
                    <argument>${arg.auth}</argument>
                    <argument>${arg.option}</argument>
                    <argument>${arg.request-id}</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>auth-console</id>
      <properties>
      </properties>
      <build>
        <defaultGoal>process-test-classes</defaultGoal>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
              <execution>
                <id>auth-console</id>
                <phase>process-test-classes</phase>
                <configuration>
                  <executable>java</executable>
                  <classpathScope>test</classpathScope>
                  <arguments>
                    <argument>-Dlog4j.configurationFile=src/test/resources/log4j2-auth.xml</argument>
                    <argument>-classpath</argument>
                    <!-- automatically creates the classpath using all project dependencies, also adding the project build directory -->
                    <classpath/>
                    <argument>com.ibm.ml.repository.v4.service.AuthApp</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>json-tests</id>
      <properties>
        <tests.wildcard.suites>com.ibm.ml.repository.v4.utils.JsonSpec</tests.wildcard.suites>
      </properties>
    </profile>
    <profile>
      <id>mlfailures</id>
      <properties>
        <tests.wildcard.suites>com.ibm.ml.repository.v4.utils.errors.ErrorHandlingSpec</tests.wildcard.suites>
      </properties>
    </profile>
  </profiles>
</project>
