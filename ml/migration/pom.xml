<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>ml-repository-parent</artifactId>
    <groupId>com.ibm.ml.repository.v4</groupId>
    <version>2.0.1</version>
  </parent>

  <artifactId>migration</artifactId>
  <packaging>jar</packaging>

  <properties>
    <main.class>com.ibm.ml.repository.v4.migration.service.MLRepositoryMigrationServerApp</main.class>

    <ml.repository.test.http.port>18804</ml.repository.test.http.port>

    <!-- options for running the service locally -->
    <local.conf.file>${user.home}/ml-repository/local.conf</local.conf.file>
    <local.show.config>false</local.show.config>

    <extra.local.jvm.args/>

    <!-- options for java debugging of the service -->
    <!-- https://www.jetbrains.com/help/idea/2019.2/attaching-to-local-process.html -->
    <java.debug.options>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5009</java.debug.options>

    <skip.server.start>false</skip.server.start>
  </properties>

  <dependencies>
    <!-- scala -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
    </dependency>

    <!-- START: these are here to force the latest versions to avoid CVE errors -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.12.1</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>2.12.1</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.12.1</version>
    </dependency>
    <dependency>
      <groupId>org.yaml</groupId>
      <artifactId>snakeyaml</artifactId>
      <version>1.27</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk15on</artifactId>
      <version>1.68</version>
    </dependency>
    <!-- END: these are here to force the latest versions to avoid CVE errors -->

    <dependency>
      <groupId>com.ibm.ml.repository.v4</groupId>
      <artifactId>utils</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ibm.ml.repository.v4</groupId>
      <artifactId>tests</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- the service-lib libraries -->
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-utils-common_${scala.compat.version}</artifactId>
    </dependency>

    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-kube-client_${scala.compat.version}</artifactId>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http-spray-json_${scala.compat.version}</artifactId>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-slf4j_${scala.compat.version}</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- cloudant -->
    <dependency>
      <groupId>com.cloudant</groupId>
      <artifactId>cloudant-client</artifactId>
      <version>${cloudant.version}</version>
    </dependency>

    <!-- tests -->
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.compat.version}</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>tests</artifactId>
      <classifier>tests</classifier>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.ibm.analytics.wml.ml-utils</groupId>
      <artifactId>ml-test-framework_${scala.compat.version}</artifactId>
      <version>${ml-service.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>test-jar</id>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <archive>
            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>verify</phase>
            <goals>
              <goal>test-jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeScope>runtime</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <overWriteReleases>true</overWriteReleases>
              <prependGroupId>true</prependGroupId>
            </configuration>
          </execution>
          <execution>
            <id>print-dependency-tree</id>
            <phase>package</phase>
            <goals>
              <goal>tree</goal>
            </goals>
            <configuration>
              <appendOutput>true</appendOutput>
              <outputFile>${project.build.directory}/libraries.txt</outputFile>
              <scope>runtime</scope>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>save-dependent-libs</id>
            <phase>prepare-package</phase>
            <configuration>
              <target>
                <delete file='${project.build.directory}/libraries.txt' quiet='true'/>
                <echo>Saving dependent libraries for COO to ${project.build.directory}/libraries.txt</echo>
                <exec executable='/bin/ls'
                      osfamily='unix'
                      failonerror='true'
                      output='${project.build.directory}/libraries.txt'>
                  <arg value='-1'/>
                  <arg value='${project.build.directory}/lib'/>
                </exec>
                <echo file='${project.build.directory}/libraries.txt' append='true'>

                </echo>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- disable surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>local-tests</id>
      <activation>
        <property>
          <name>skipTests</name>
          <value>!true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>${antrun.plugin.version}</version>
            <executions>
              <execution>
                <id>make-logs-dir</id>
                <phase>process-test-classes</phase>
                <configuration>
                  <target>
                    <mkdir dir="${project.build.directory}/logs"/>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
              <execution>
                <id>show-local-tests</id>
                <phase>integration-test</phase>
                <configuration>
                  <target>
                    <echo>Executing local tests for ${tests.wildcard.suites}</echo>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
              <execution>
                <id>setup-service</id>
                <phase>prepare-package</phase>
                <configuration>
                  <target>
                    <property name="runtime_classpath" refid="maven.runtime.classpath"/>
                    <copy todir='${project.build.directory}'
                          file='${project.basedir}/src/test/resources/start-server.sh'
                          force='true'
                          overwrite='true'>
                      <filterset begintoken='${' endtoken='}'>
                        <filter token='java.home' value='${java.home}'/>
                        <filter token='user.name' value='${user.name}'/>
                        <filter token='project.basedir' value='${project.basedir}'/>
                        <filter token='project.build.directory' value='${project.build.directory}'/>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter token='runtime_classpath' value='${runtime_classpath}'/>
                        <filter token='main.class' value='${main.class}'/>
                        <filter token='log.file' value='-Dlog4j.configurationFile=${project.build.directory}/test-classes/log4j2-server.xml'/>
                        <filter token='config.file' value='-Dconfig.file=${project.build.directory}/test-classes/application-server.conf'/>
                      </filterset>
                    </copy>
                    <chmod perm="a+x" file="${project.build.directory}/start-server.sh"/>
                    <echo>Created start server script ${project.build.directory}/start-server.sh</echo>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest-maven-plugin</artifactId>
            <version>${scalatest.plugin.version}</version>
            <configuration>
              <forkMode>${tests.fork.mode}</forkMode>
              <stdout>${tests.stdout.coloring}</stdout> <!-- Skip coloring output -->
              <testFailureIgnore>false</testFailureIgnore>
              <wildcardSuites>${tests.wildcard.suites}</wildcardSuites>
              <parallel>${tests.parallel}</parallel>
              <reporters>com.ibm.ngpa.test_automation.framework.report.html.NGPATestReporter</reporters>
              <environmentVariables>
                <DEVELOPMENT>true</DEVELOPMENT>
              </environmentVariables>
              <tagsToExclude>${tags.to.exclude}</tagsToExclude>
              <tagsToInclude>${tags.to.include}</tagsToInclude>
            </configuration>
            <executions>
              <execution>
                <id>run-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.honton.chas</groupId>
            <artifactId>process-exec-maven-plugin</artifactId>
            <version>${process-exec.plugin.version}</version>
            <executions>
              <execution>
                <id>start-service</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <skip>${skip.server.start}</skip>
                  <name>${main.class}</name>
                  <workingDir>${project.build.directory}</workingDir>
                  <waitForInterrupt>false</waitForInterrupt>
                  <!-- does not work because we have no certificate
                  <healthCheckUrl>${healthcheck.url}</healthCheckUrl>
                  <healthCheckValidateSsl>false</healthCheckValidateSsl>
                  -->
                  <waitAfterLaunch>10</waitAfterLaunch>
                  <processLogFile>${project.build.directory}/process.log</processLogFile>
                  <arguments>
                    <argument>${project.build.directory}/start-server.sh</argument>
                  </arguments>
                </configuration>
              </execution>
              <!--Stop all processes in reverse order-->
              <execution>
                <id>stop-all</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop-all</goal>
                </goals>
                <configuration>
                  <skip>${skip.server.start}</skip>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <reporting>
        <plugins>
          <plugin>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest-maven-plugin</artifactId>
            <version>${scalatest.plugin.version}</version>
          </plugin>
        </plugins>
      </reporting>
    </profile>
    <profile>
      <id>check-style</id>
      <activation>
        <file>
          <missing>no-check-style</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scalastyle</groupId>
            <artifactId>scalastyle-maven-plugin</artifactId>
            <version>${scalastyle.plugin.version}</version>
            <executions>
              <execution>
                <id>verify-style</id>
                <!-- we do this after compile as otherwise the files might not parse -->
                <phase>prepare-package</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>coverage</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scoverage</groupId>
            <artifactId>scoverage-maven-plugin</artifactId>
            <inherited>true</inherited>
            <executions>
              <execution>
                <id>scoverage</id>
                <phase>prepare-package</phase>
                <configuration>
                  <additionalForkedProjectProperties>skipTests=false</additionalForkedProjectProperties>
                </configuration>
                <goals>
                  <goal>integration-check</goal>
                  <goal>report-only</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <reporting>
        <plugins>
          <plugin>
            <groupId>org.scoverage</groupId>
            <artifactId>scoverage-maven-plugin</artifactId>
            <version>${scoverage.plugin.version}</version>
          </plugin>
        </plugins>
      </reporting>
    </profile>
    <profile>
      <id>all-cloud-tests</id>
      <properties>
        <tests.wildcard.suites>com.ibm.ml.repository.v4.migration.api.v4</tests.wildcard.suites>
        <!--<tags.to.include/>
        <tags.to.exclude>com.ibm.ml.repository.v4.tests.tags.CP4DOnly,com.ibm.ml.repository.v4.tests.tags.CloudOnly</tags.to.exclude>-->
      </properties>
    </profile>
    <profile>
      <id>all-cpd-tests</id>
      <properties>
        <tests.wildcard.suites>com.ibm.ml.repository.v4.migration.upgrade.api.v4</tests.wildcard.suites>
      </properties>
    </profile>
    <profile>
      <id>skip-migration-tests</id>
      <properties>
        <tests.wildcard.suites>com.ibm.ml.repository.v4.migration.skip.tests</tests.wildcard.suites>
      </properties>
    </profile>
  </profiles>
</project>
