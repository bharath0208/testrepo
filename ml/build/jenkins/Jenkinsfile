pipeline {
  agent {
    node { label 'wml-repo-image' }
  }

  parameters {
    string(name: 'SERVICE_NAME', defaultValue: 'wmlrepositoryv4', description: '')
    string(name: 'MAJOR', defaultValue: '2', description: '')
    string(name: 'MINOR', defaultValue: 'test', description: '')
    string(name: 'REMOTE_DOCKER_ADDRESS', defaultValue: 'root@9.30.43.97', description: '')
    string(name: 'TESTS_PROFILE', defaultValue: 'all-tests', description: """
This can be set to a predefined test profile. Currently the following profiles exist:
<ul>
  <li><strong>all-tests</strong> : run all the tests</li>
  <li><strong>smoke-tests</strong> : run all tests tagged 'SmokeTest'.</li>
  <li><strong>no-service-tests</strong> : exclude all tests tagged 'ServiceAPI'.</li>
</ul>
This must NOT be left blank.
    """)
  }

  environment {
    FULL_BUILD_NUMBER = "${MAJOR}.${MINOR}.${BUILD_NUMBER}"
    REMOTE_DOCKER_PASSWORD = credentials('remote-docker-password')
    DOCKER_REGISTRY_APIKEY = credentials('docker-registry-apikey')
  }


  options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    disableConcurrentBuilds()
    timestamps()
    timeout(time: 2, unit: 'HOURS')
  }

  stages {
    stage('Prepare') {
      steps {
        configFileProvider([
          configFile(fileId: 'repo-test-env-var', variable: 'REPO_ENVS')
        ]) {
            script {
                def props = readProperties file: "$REPO_ENVS"
                props.each {
                  key, value -> env[key] = value;
                }
            }
        }
      }
    }
    stage('Git checkout') {
      steps {
        git credentialsId: 'nkfuncid-github', url: 'https://github.ibm.com/WML/ml-repository.git'
      }
    }
    stage('Maven Build') {
      steps {
        // Shell build step
        sh """
          printenv
          pwd
          whoami
          hostname
          uptime
          uname -a
          sleep 5
          java --version
          mvn --version
          unzip -v
          ls -la
        """
        configFileProvider([
          configFile(fileId: 'global-maven-settings', variable: 'MAVEN_SETTINGS')
        ]) {
            sh 'mvn -s $MAVEN_SETTINGS --batch-mode -U --activate-profiles coverage,${TESTS_PROFILE} clean deploy -Dproject.finalVersion=${FULL_BUILD_NUMBER} -Dtests.stdout.coloring=W'
            sh 'mvn -s $MAVEN_SETTINGS -P build-docker-zip --non-recursive'
        }

      }
    }
    stage('Archive artifact'){
      steps {
        archiveArtifacts artifacts: '**/*.properties,**/docker.zip,**/libraries.txt'
      }
    }
    stage('Docker build') {
      steps {
        // connect to remote docker
        sh 'setup_remote_docker.sh'
        sh 'ls -la && unzip -o ./docker.zip'
        sh 'docker login -u iamapikey -p ${DOCKER_REGISTRY_APIKEY} registry.ng.bluemix.net'
        // please note this will build both x86 and power
        sh "docker buildx build --platform linux/amd64,linux/ppc64le  --build-arg VERSION=${FULL_BUILD_NUMBER} -t registry.ng.bluemix.net/wmlregistry/wmlrepositoryv4:${FULL_BUILD_NUMBER} --no-cache=true --pull=true --push --file=./docker/ml-repository/Dockerfile ."
      }
    }
  }

  post {
    always {
      sh """
        docker buildx ls
        docker buildx stop remote-docker-builder
      """
    }
    success {
      echo "Job done"
    }
  }
}

